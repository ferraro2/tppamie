# -*- coding: utf-8 -*-
from __future__ import division, print_function, unicode_literals
import re

########### CUSTOM API COMMAND PATTERNS ###############
setEmotePat = re.compile(r"""
	^
	\s*
	(set[\s\-+_]?emote | emote)
	\s+
	(?P<emoteName> \S+)
	.*
	$""", re.IGNORECASE | re.VERBOSE)

setEmoteOfUserPat = re.compile(r"""
	^
	\s*
	(set[\s\-+_]?emote | emote)
	\s+
	(?P<username> \S+)
	\s+
	(?P<emoteName> \S+)
	.*
	$""", re.IGNORECASE | re.VERBOSE)

setColorOfUserPat = re.compile(r"""
	^
	\s*
	(set[\s\-+_]?color | color)
	\s+
	(?P<username> \S+)
	\s+
	(?P<colorName> \S+)
	.*
	$""", re.IGNORECASE | re.VERBOSE)

removeEmotePat = re.compile(r"""
	^
	\s*
	(remove[\s\-+_]?emote | emote none)
	.*
	$""", re.IGNORECASE | re.VERBOSE)

adminMatchPkmnPat = re.compile(r"""
	^
	([^,/]+) \s* , \s*
	([^,/]+) \s* , \s*
	([^,/]+) \s* [,/] \s*
	([^,/]+) \s* , \s*
	([^,/]+) \s* , \s*
	([^,/]+)
	$""", re.IGNORECASE | re.VERBOSE)

#tpp patterns

tppMatchPkmnPat = re.compile(r"""
	.* for \s the \s next \s match \s are \s
	(.*) , \s
	(.*) , \s
	(.*) \s and \s
	(.*) , \s
	(.*) , \s
	(.*) !
	.*""", re.IGNORECASE | re.VERBOSE)


#Volbeat, Hitmonlee, Hitmonchan vs. Illumise, Machamp, Gengar won the match bidding with T2 total from Big_Boyd!
tppMatchPkmnPat2 = re.compile(r"""
	(.*) , \s
	(.*) , \s
	(.*) \s vs\. \s
	(.*) , \s
	(.*) , \s
	(.*) \s won \s the \s match \s bidding
	.*""", re.IGNORECASE | re.VERBOSE)

#Adarahs1 has P14460 pokeyen T0 tokens
tppBalanceWhisperPat = re.compile(r"""
	(?P<username> .*) \s has \s
	P(?P<pokeyen> \d+) \s pokeyen \s
	T(?P<tokens> \d+) \s tokens""", re.IGNORECASE | re.VERBOSE)

#pattern for IRC logs generated by twitch_bot.py 
ircLoggerPrivPat = re.compile(r"""
	\[  
	(?P<dateTimeStr> [^\]]+  )	#datetime
	\] \s \s \s \s
	(?P<sender> [^:]+ )			#sender
	: \s
	(?P<text> .* )				#msg
	$""", re.IGNORECASE | re.VERBOSE)

#Twitch API
badgeUrlPat = re.compile('https://static-cdn.jtvnw.net/badges/v1/(?P<url>[^/].+)/', re.IGNORECASE)

#@color=#0D4200;display-name=TWITCH_UserNaME;emotes=25:0-4,12-16/1902:6-10;mod=0;subscriber=0;turbo=1;user-id=1337;
#:twitch_username!twitch_username@twitch_username.tmi.twitch.tv PRIVMSG #channel :message here
twitchMsgPat = re.compile(r"""
	#config_raw (optional)
		^(  @(?P<config_raw>\S+)\s  )? 
	
	#sender
	#sender may be repeated several times, like ":name!name@name" or only once, like :tmi.twitch.tv
		:(?P<sender>  [a-zA-Z0-9_]+  )  \S*\s
		
	#action (PRIVMSG, JOIN, 353, etc)
		(?P<action>  [A-Z0-9]+  )\s
	
	#target
		(?P<target> \#?  \w+  )
		
	#text (optional)
	(  \s  :?(?P<text>.*)  )?
	$
	""", re.VERBOSE)

twitchPingPat = re.compile(r"^PING :tmi.twitch.tv$")
	
########### TPP BOT PATTERNS ###############

#NOTE: python match() purpose: "Determine if the RE matches at the beginning of the string."  So if you want to match the entire string, add $ at the end!
	
#tpp bots don't need this check, but player messages do

betPat1 = re.compile(r"""
	!bet	#bet command		 
	\s+	
	p?(?P<amount> \d+ )			#amount
	\s+
	(?P<team> (red|blue) )		#team
	\s*
	$""", re.IGNORECASE | re.VERBOSE)
	
betPat2 = re.compile(r"""
	!bet	#bet command		 
	\s+	
	(?P<team> (red|blue) )		#team
	\s+
	p?(?P<amount> \d+ )			#amount
	\s*
	$""", re.IGNORECASE | re.VERBOSE)

movePat = re.compile(r"""
!(?P<move> [abcd123-] )		#move
(\s.*)?		#optional junk
$""", re.IGNORECASE | re.VERBOSE)

bettingOpenPat = re.compile(r"A new match is about to begin!.*")
battleBegunPat = re.compile(r"The battle between (.*), (.*), (.*) and (.*), (.*), (.*) has just begun!")
matchEndedPat = re.compile(r"Team (\w+) won the match!")
matchDrawPat = re.compile(r"Match resulted in a draw.")
bettingClosesPat = re.compile(r"The match starts in (\d+) seconds.")


# USER WHISPER TO BOT PATTERNS
msgHideAllPat = re.compile(r"^hide all my messages on tppamie\.com/logs", re.IGNORECASE)
msgUnhideAllPat = re.compile(r"^(undo|un)\s?hide all my messages on tppamie\.com/logs", re.IGNORECASE)

msgHidePat = re.compile(r"^hide message from tppamie\.com/logs with id (?P<msg_id>\d+)", re.IGNORECASE)
msgUnhidePat = re.compile(r"^(undo|un)\s?hide message from tppamie\.com/logs with id (?P<msg_id>\d+)", re.IGNORECASE)
